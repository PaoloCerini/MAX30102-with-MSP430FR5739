#include <msp430.h> 
#include <stdint.h>
#include <stdbool.h>


#define SLAVE_ADDR  0x57


uint8_t TransmitRegAddr = 0;  //The Register Address to use
uint8_t DATA_BYTE_RECEIVED=0;
uint8_t mask=0;
int i = 0;

int array[2]= {0};
unsigned int counter = 0;

//******************************************************************************
// General I2C State Machine ***************************************************
//******************************************************************************

typedef enum I2C_ModeEnum{
    IDLE_MODE,
    TX_REG_ADDRESS_MODE,
    RX_REG_ADDRESS_MODE,
    TX_DATA_MODE,
    RX_DATA_MODE,
    SWITCH_TO_RX_MODE,
    SWITCH_TO_TX_MODE,
} I2C_Mode;

I2C_Mode MasterMode = IDLE_MODE;



 uint8_t Fifo_WR_PTR;
 uint8_t Fifo_RD_PTR;
 uint16_t Num_Samples_Available;
 uint16_t Num_Samples_Read;
 uint8_t ir1;
 uint8_t ir2;
 uint8_t ir3;
 uint8_t red1;
 uint8_t red2;
 uint8_t red3;
 uint32_t ir;
 uint32_t red;

 //MAPPA DEI REGISTRI DEL SENSORE MAX 30102

 // Status Registers
  uint8_t MAX30102_INTSTAT1 =        0x00;
  uint8_t MAX30102_INTSTAT2 =        0x01;
  uint8_t MAX30102_INTENABLE1 =      0x02;
  uint8_t MAX30102_INTENABLE2 =      0x03;

 // FIFO Registers
  uint8_t MAX30102_FIFOWRITEPTR =    0x04;
 uint8_t MAX30102_FIFOOVERFLOW =    0x05;
 uint8_t MAX30102_FIFOREADPTR =     0x06;
 uint8_t MAX30102_FIFODATA =        0x07;

 // Configuration Registers
 uint8_t MAX30102_FIFOCONFIG =      0x08;
 uint8_t MAX30102_MODECONFIG =      0x09;
 uint8_t MAX30102_PARTICLECONFIG =  0x0A;    // Note, sometimes listed as "SPO2" config in datasheet (pg. 10)
 uint8_t MAX30102_LED1_PULSEAMP =   0x0C;
 uint8_t MAX30102_LED2_PULSEAMP =   0x0D;
 uint8_t MAX30102_MULTILEDCONFIG1 = 0x11;
 uint8_t MAX30102_MULTILEDCONFIG2 = 0x12;

 // Die Temperature Registers
 uint8_t MAX30102_DIETEMPINT =      0x1F;
 uint8_t MAX30102_DIETEMPFRAC =     0x20;
 uint8_t MAX30102_DIETEMPCONFIG =   0x21;

 // Part ID Registers
 uint8_t MAX30102_REVISIONID =      0xFE;
 uint8_t MAX30102_PARTID =          0xFF;    // Should always be 0x15. Identical to MAX30102.

 //---MAPPA DELLE FUNZIONI

 void setup_clk_16MHz();
 void initI2C();
 void setup_uart();
 void write_data (uint8_t REGISTER_ADDRESS_TO_BE_WRITE, uint8_t mask );
 uint32_t read_data (uint8_t REGISTER_ADDRESS_TO_BE_READ);
 void reset_FIFO_registers ();
 void reading_data_from_FIFO ();


 //---DEFINIZIONE DELLE FUNZIONI

 void setup_clk_16MHz()
    {
        CSCTL0 = 0xA500;                        //password per clk
        CSCTL1 = 0;                             // Clear DCO settings
        CSCTL1 |= DCORSEL | DCOFSEL_2;          // Set DCO to 16MHz
        CSCTL2 |= SELA_3 | SELS_3 | SELM_3;     //tutte le sorgenti collegate al DCO
        CSCTL3 = 0;                             //divisore per MCLK=1
        CSCTL3 |= DIVA_0 | DIVS_0 | DIVM_0;     //set all dividers to /1
        CSCTL0_H = 0;                           //blocco registri
    }
    void initI2C() // inizializza comunicazione seriale
    {
        UCB0CTLW0 = UCSWRST;                      // Enable SW reset
        UCB0CTLW0 |= UCMODE_3 | UCMST | UCSSEL__SMCLK | UCSYNC; // I2C mode, master mode, SMCLK
        UCB0BRW = 160;                            // fSCL = SMCLK/160 = ~100kHz
    //    UCB0IE |= BIT0 | BIT1;              // abilita modalità ricezione e trasmissione
        // impostazione I2C pins 1.6 (SDA) e 1.7 (SCL)
        P1SEL0 &= ~(BIT6 + BIT7);
        P1SEL1 |= BIT6 + BIT7;
        UCB0CTLW0 &= ~UCSWRST;                    // Clear SW reset, resume operation
    }
    void setup_uart()
    {
        UCA0CTL1 |= UCSWRST;        //inizializzo UART
        P2SEL1 |= BIT1 | BIT0;      // P2.0 e P2.1 come RX e TX UART
        UCA0BRW = 130;              // baud 9600
        UCA0MCTLW = 0x02531;
        UCA0CTL1 |= BIT7;
        UCA0CTL1 &= ~UCSWRST;
        UCA0IE |= BIT0;
    }
//funzione che dovrebbe scrivere sui registri configurabili del sensore (scritta seguendo le istruzioni di pagina 29 datasheet max30102)
    void write_data ( uint8_t REGISTER_ADDRESS_TO_BE_WRITE, uint8_t set_mask )
    {

        MasterMode = TX_DATA_MODE;

        array[0] = REGISTER_ADDRESS_TO_BE_WRITE;
        array[1] = set_mask;

        UCB0CTLW0 |= UCTR;             // I2C TX mode (write)
        UCB0I2CSA = SLAVE_ADDR;                   // Slave Address
        UCB0IFG &= ~(UCTXIFG + UCRXIFG);       // Clear any pending interrupts
        UCB0IE &= ~UCRXIE0;                       // Disable RX interrupt
        UCB0IE |= UCTXIE0;                        // Enable TX interrupt
        UCB0CTLW1=UCASTP_2; //stop automatico generato dopo che il byte counter è arrivato al valore di ucb0tbcnt---> viene portata alta la ucbcntifg
        UCB0TBCNT=2; //tx 2 bytes of data
        UCB0CTLW0 |= UCTXSTT; //start condition

        __enable_interrupt ();
    }
 //funzione che mi permette di leggere il valore del registro REGISTER_ADDRESS_TO_BE_READ (pagina 30 datasheet max30102)
        uint32_t read_data (uint8_t REGISTER_ADDRESS_TO_BE_READ)
        {
            MasterMode = TX_REG_ADDRESS_MODE;
            TransmitRegAddr=REGISTER_ADDRESS_TO_BE_READ;

            UCB0CTLW0 |= UCTR;             // I2C TX mode (write)
            UCB0I2CSA = SLAVE_ADDR;                   // Slave Address
            UCB0IFG &= ~(UCTXIFG + UCRXIFG);       // Clear any pending interrupts
            UCB0IE &= ~UCRXIE0;                       // Disable RX interrupt
            UCB0IE |= UCTXIE0;                        // Enable TX interrupt
            UCB0CTLW1=UCASTP_2; //stop automatico generato dopo che il byte counter è arrivato al valore di ucb0tbcnt---> viene portata alta la ucbcntifg
            UCB0TBCNT=1; // 1 byte of data
            UCB0CTLW0 |=  UCTXSTT;             //  start condition

            __enable_interrupt();

          //  return (DATA_BYTE_RECEIVED);
        }

        // FUNZIONE CHE RESETTA I REGISTRI FIFO DELLO SLAVE NECESSARIO PRIMA DELLA LETTURA DEL DATO
        void reset_FIFO_registers ()
        {
            write_data(MAX30102_FIFOWRITEPTR, 0x00);
            write_data(MAX30102_FIFOREADPTR, 0x00);
            write_data(MAX30102_FIFOOVERFLOW, 0x00);
        }

        //funzione che legge il dato dalla fifo
        void reading_data_from_FIFO ()
        {
           reset_FIFO_registers();
           UCB0IFG &= ~(UCTXIFG + UCRXIFG);       // Clear any pending interrupts
           Fifo_WR_PTR = read_data(MAX30102_FIFOWRITEPTR);    // leggo questo registro per sapere dove il sensore scriverà il prossimo dato
           Fifo_RD_PTR = read_data(MAX30102_FIFOREADPTR);
           Num_Samples_Available = Fifo_WR_PTR - Fifo_RD_PTR;
           if (Num_Samples_Available < 0) Num_Samples_Available += 32; //Wrap condition

           for (i = 0; i < Num_Samples_Available; i++)
           {
               ir1 = read_data(MAX30102_FIFODATA);                                      // Receive first byte of sample
               ir2 = read_data(MAX30102_FIFODATA);                             // Receive second byte of sample
               ir3 = read_data(MAX30102_FIFODATA);
               ir = (uint32_t) ir1 << 15 | (uint32_t) ir2 << 8 | (uint32_t) ir3;              // Complete iR sample
               red1 = read_data(MAX30102_FIFODATA);                                     // Receive third byte of sample
               red2 = read_data(MAX30102_FIFODATA);                                     // Receive fourth byte of sample
               red3 = read_data(MAX30102_FIFODATA);                                     // Receive fourth byte of sample
               red = (uint32_t) red1 << 15 | (uint32_t) red2 << 8 | (uint32_t) red3;                      // Complete Red sample
           }
        }


int main(void)
{
    WDTCTL = WDTPW | WDTHOLD;   // stop watchdog timer

     initI2C();
     setup_clk_16MHz();
     setup_uart();


    __bis_SR_register(GIE);         //imposta un singolo bit all'interno dello status register ovvero il bit GIE che imposta i bit degli interrupt
     __no_operation();

     //CONFIGURAZIONE REGISTRI DEL SENSORE
     write_data(MAX30102_FIFOCONFIG,BIT0+BIT1); //0x03 setta il registro fifo_configuration a 0000011, ovverO SMP_AVE 000, FIFO_ROLL_OVER DISABLED E FIFO_A_FULL A 0X03 (FIFO quasi piena quando ha preso 29 samples)
     write_data(MAX30102_MODECONFIG,BIT0+BIT1); //set spo2 mode
     write_data(MAX30102_PARTICLECONFIG,BIT2+BIT1+BIT3); //spo2 adc range 2048,sample rate 400 e pulse width 215us
     write_data(MAX30102_LED1_PULSEAMP,0x7f); //set the current level of first led to 25.4mA
     write_data(MAX30102_LED2_PULSEAMP,0x7f); //set the current level of second led to 25.4mA

      reading_data_from_FIFO ();

     // riga destinata alla funzione per ottenere spo2

  //  while(1);
    return 0;

}

//I2C interrupts (per la sintassi dello switch guardare pag 551 della user guide)

#pragma vector = USCI_B0_VECTOR           //attivo interrupt I2C
__interrupt void USCI_B0_HANDLER(void)
{
 switch(__even_in_range(UCB0IV, USCI_I2C_UCBIT9IFG))
 {
 case USCI_I2C_UCRXIFG0:

     DATA_BYTE_RECEIVED = UCB0RXBUF ;          //svuoto buff di ricezione
     MasterMode = IDLE_MODE;

        break;

 case USCI_I2C_UCTXIFG0:

     switch (MasterMode)
     {
     case TX_REG_ADDRESS_MODE:
     UCB0TXBUF = TransmitRegAddr;
     MasterMode = SWITCH_TO_RX_MODE;   // Need to start receiving now
     break;

     case SWITCH_TO_RX_MODE:
         MasterMode = RX_DATA_MODE;    // State state is to receive data
         UCB0I2CSA = SLAVE_ADDR;                   // Slave Address
         UCB0CTLW0 &= ~UCTR;                //I2C RX
         UCB0IFG &= ~(UCTXIFG + UCRXIFG);       // Clear any pending interrupts
         UCB0IE &= ~UCTXIE;                       // Disable TX interrupt
         UCB0IE |= UCRXIE;                        // Enable RX interrupt
         UCB0CTLW0 |= UCTXSTT;          // Send repeated start
         break;

     case TX_DATA_MODE:

    //con quest'if si carica il buffer con il dato da trasmettere, prima trasmetto il byte del registro che voglio sovrascrivere e poi la maschera da applicargli

     if (counter == 1) {
        UCB0TXBUF = array[counter];
        counter = 0;
    } else {
        UCB0TXBUF = array[counter];
        counter++;
    }
     break;
 }}}
